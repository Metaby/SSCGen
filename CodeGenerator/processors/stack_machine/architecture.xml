<?xml version="1.0" encoding="UTF-8" ?>
<architecture wordSize="8">
	<register>
		<id>pcReg</id>
		<size>8</size>
		<inputs>
			<input>pcReg.out</input>
			<input>pcInc.out</input>
		</inputs>
		<output>pcReg.out</output>
		<control>system.auto</control>
	</register>
	<register>
		<id>mpcReg</id>
		<size>8</size>
		<inputs>
			<input>mpcMux.out</input>
		</inputs>
		<output>mpcReg.out</output>
		<control>system.const.1</control>
	</register>
	<register>
		<id>op1_register</id>
		<size>8</size>
		<inputs>
			<input>stack.out</input>
		</inputs>
		<output>op1_register.out</output>
		<control>system.auto</control>
	</register>
	<register>
		<id>op2_register</id>
		<size>8</size>
		<inputs>
			<input>stack.out</input>
		</inputs>
		<output>op2_register.out</output>
		<control>system.auto</control>
	</register>
	<register>
		<id>stackPtr</id>
		<size>8</size>
		<inputs>
			<input>stackPtr.out</input>
			<input>stackAlu.out</input>
		</inputs>
		<output>stackPtr.out</output>
		<control>system.auto</control>
	</register>
	<register>
		<id>port</id>
		<size>8</size>
		<inputs>
			<input>stack.out</input>
		</inputs>
		<output>system.out.blub</output>
		<control>system.auto</control>
	</register>
	<rom>
		<id>progMem</id>
		<wordSize>8</wordSize>
		<addressSize>8</addressSize>
		<contentFile>processors/stack_machine/program.hex</contentFile>
		<addresses>
			<address>pcReg.out</address>
		</addresses>
		<output>progMem.out</output>
		<control>system.auto</control>
	</rom>
	<rom>
		<id>mProgMem</id>
		<wordSize>13</wordSize>
		<addressSize>8</addressSize>
		<contentFile>processors/stack_machine/stack_machine_microprogram.hex</contentFile>
		<addresses>
			<address>mpcReg.out</address>
		</addresses>
		<output>system.control</output>
		<control>system.auto</control>
	</rom>
	<registerFile>
		<id>stack</id>
		<wordSize>8</wordSize>
		<addressSize>8</addressSize>
		<ports>
			<port>
				<type>in</type>
				<addresses>
					<address>stackPtr.out</address>
				</addresses>
				<inputs>
					<input>progMem.out</input>
					<input>math.low</input>
					<input>math.high</input>
				</inputs>
			</port>
			<port>
				<type>out</type>
				<addresses>
					<address>stackPtr.out</address>
				</addresses>
				<output>stack.out</output>
			</port>
		</ports>
		<control>system.auto</control>
	</registerFile>
	<alu>
		<id>pcInc</id>
		<wordSize>8</wordSize>
		<inputsOperandA>
			<input>pcReg.out</input>
		</inputsOperandA>
		<inputsOperandB>
			<input>system.const.1</input>
		</inputsOperandB>
		<output1>pcInc.out</output1>
		<output2>system.open</output2>
		<operations>
			<operation>add_u</operation>
		</operations>
		<control>system.auto</control>
		<status>system.open</status>
	</alu>
	<alu>
		<id>mpcInc</id>
		<wordSize>8</wordSize>
		<inputsOperandA>
			<input>mpcReg.out</input>
		</inputsOperandA>
		<inputsOperandB>
			<input>system.const.1</input>
		</inputsOperandB>
		<output1>mpcInc.out</output1>
		<output2>system.open</output2>
		<operations>
			<operation>add_u</operation>
		</operations>
		<control>system.auto</control>
		<status>system.open</status>
	</alu>
	<alu>
		<id>math</id>
		<wordSize>8</wordSize>
		<inputsOperandA>
			<input>op1_register.out</input>
		</inputsOperandA>
		<inputsOperandB>
			<input>op2_register.out</input>
		</inputsOperandB>
		<output1>math.low</output1>
		<output2>math.high</output2>
		<operations>
			<operation>add_u</operation>
			<operation>sub_u</operation>
			<operation>mul_u</operation>
		</operations>
		<control>system.auto</control>
		<status>math.status</status>
	</alu>
	<alu>
		<id>stackAlu</id>
		<wordSize>8</wordSize>
		<inputsOperandA>
			<input>stackPtr.out</input>
		</inputsOperandA>
		<inputsOperandB>
			<input>system.const.1</input>
		</inputsOperandB>
		<output1>stackAlu.out</output1>
		<output2>system.open</output2>
		<operations>
			<operation>add_u</operation>
			<operation>sub_u</operation>
		</operations>
		<control>system.auto</control>
		<status>system.open</status>
	</alu>
	<multiplexer>
		<id>mpcMux</id>
		<wordSize>8</wordSize>
		<inputs>
			<input>mpcInc.out</input>
			<input>progMem.out</input>
		</inputs>
		<output>mpcMux.out</output>
		<control>system.auto</control>
	</multiplexer>
</architecture>