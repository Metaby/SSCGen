/*
 *	Conventions:
 *	isel = input-select
 *	asel = address-select
 *	csel = command-select
 *
 *	Fields and Parameters:
 *	pc_register_write[0:0] = {H, L}
 *	mpc_register_write[1:1] = {H, L}
 *	port2_register_write[2:2] = {H, L}
 *	port3_register_write[3:3] = {H, L}
 *	operand1_register_write[4:4] = {H, L}
 *	operand2_register_write[5:5] = {H, L}
 *	address_register_write[6:6] = {H, L}
 *	cache_register_file_port0_isel[7:9] = {system.port1, system.port0, CONST(0), program_rom.out, math_alu.high, math_alu.low}
 *	cache_register_file_port0_write[10:10] = {H, L}
 *	math_alu_iselB[11:13] = {CONST(1), CONST(0), math_alu.high, math_alu.low, operand2_register.out}
 *	math_alu_csel[14:18] = {RR, GEQ_U, ADD, LEQ_U, SRA, LT, SRL, SUB_U, SLL, MUL_U, SUB, GT_U, OR, ADD_U, MUL, DIV_U, EQ, GT, DIV, NOT, GEQ, AND, LEQ, RL, XOR, LT_U}
 *	m2_multiplexer_isel[19:19] = {program_rom.out, mpc_inc_alu.out}
 *
 *	Use noop(0) for one clock cycle without any operation
 */

#include processors/example_cpu/microprogram_def.mdl

/*
 *	Processor startup
 */
init(0x00) {
	perm mpc_register_write(H);
	set m2_multiplexer_isel(program_rom.out);
}

/*
 *	Rx = P0
 */
function LP0(auto) {
	fix cache_register_file_port0_isel(system.port0);
	set pc_register_write(H);
	set address_register_write(H);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 *	Rx = P1
 */
function LP1(auto) {
	fix cache_register_file_port0_isel(system.port1);
	set pc_register_write(H);
	set address_register_write(H);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 *	P2 = Rx
 */
function SP2(auto) {
	set pc_register_write(H);
	set address_register_write(H);
	set port2_register_write(H);
	call fetch();
}

/*
 *	P2 = Rx
 */
function SP3(auto) {
	set pc_register_write(H);
	set address_register_write(H);
	set port3_register_write(H);
	call fetch();
}

/*
 * Rz = Rx + Ry (unsigned)
 */
function ADDU(auto) {
	fix math_alu_csel(ADD_U), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * Rz = Rx - Ry (unsigned)
 */
function SUBU(auto) {
	fix math_alu_csel(SUB_U), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * Rz = Rx * Ry (unsigned)
 */
function MULU(auto) {
	fix math_alu_csel(MUL_U), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * Rz = Rx / Ry (unsigned)
 */
function DIVU(auto) {
	fix math_alu_csel(DIV_U), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * Rz = Rx + Ry (signed)
 */
function ADD(auto) {
	fix math_alu_csel(ADD), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * Rz = Rx - Ry (signed)
 */
function SUB(auto) {
	fix math_alu_csel(SUB), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * Rz = Rx * Ry (signed)
 */
function MUL(auto) {
	fix math_alu_csel(MUL), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * Rz = Rx / Ry (signed)
 */
function DIV(auto) {
	fix math_alu_csel(DIV), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * Rz = Rx rotatet right by Ry
 */
function RR(auto) {
	fix math_alu_csel(RR), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * Rz = Rx rotatet left by Ry
 */
function RL(auto) {
	fix math_alu_csel(RL), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * Rz = Rx logical right shifted by Ry
 */
function SRL(auto) {
	fix math_alu_csel(SRL), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * Rz = Rx logical left shifted by Ry
 */
function SLL(auto) {
	fix math_alu_csel(SLL), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * Rz = Rx arithmetic right shifted by Ry
 */
function SRA(auto) {
	fix math_alu_csel(SRA), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * Rz = Rx | Ry, (bitwise or)
 */
function OR(auto) {
	fix math_alu_csel(OR), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * Rz = Rx & Ry, (bitewise and)
 */
function AND(auto) {
	fix math_alu_csel(AND), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * Rz = Rx ~ Ry, (bitwise exclusive or)
 */
function XOR(auto) {
	fix math_alu_csel(XOR), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * Rz = !Rx, (bitwise not)
 */
function NOT(auto) {
	fix math_alu_csel(NOT), cache_register_file_port0_isel(math_alu.low); //, math_alu_iselB(operand2_register.out);
	call load_operands();
	set pc_register_write(H);
	set noop(0);
	set address_register_write(H);
	set noop(0);
	set cache_register_file_port0_write(H);
	call fetch();
}

/*
 * pc = Rx
 */
function JMP(auto) {
	set pc_register_write(H);
	set alu_status_register_isel(const.1);
	set alu_status_register_write(H), alu_status_register_isel(const.1);
	set pc_register_write(H);
	set alu_status_register_isel(const.0);
	set alu_status_register_write(H), alu_status_register_isel(const.0);
	set m2_multiplexer_isel(program_rom.out);
}

/*
 * pc = Rz, if Rx == Ry (unsigned)
 */
function BEQ(auto) {
	call load_operands();
	fix math_alu_csel(EQ); //, math_alu_iselB(operand2_register.out);
	set pc_register_write(H);
	set alu_status_register_isel(math_alu.status);
	set alu_status_register_write(H), alu_status_register_isel(math_alu.status);
	set pc_register_write(H);
	set alu_status_register_isel(const.0);
	set alu_status_register_write(H), alu_status_register_isel(const.0);
	set m2_multiplexer_isel(program_rom.out);
}

/*
 * pc = Rz, if Rx > Ry (unsigned)
 */
function BGTU(auto) {
	call load_operands();
	fix math_alu_csel(GT_U); //, math_alu_iselB(operand2_register.out);
	set pc_register_write(H);
	set alu_status_register_isel(math_alu.status);
	set alu_status_register_write(H), alu_status_register_isel(math_alu.status);
	set pc_register_write(H);
	set alu_status_register_isel(const.0);
	set alu_status_register_write(H), alu_status_register_isel(const.0);
	set m2_multiplexer_isel(program_rom.out);
}

/*
 * pc = Rz, if Rx < Ry (unsigned)
 */
function BLTU(auto) {
	call load_operands();
	fix math_alu_csel(LT_U); //, math_alu_iselB(operand2_register.out);
	set pc_register_write(H);
	set alu_status_register_isel(math_alu.status);
	set alu_status_register_write(H), alu_status_register_isel(math_alu.status);
	set pc_register_write(H);
	set alu_status_register_isel(const.0);
	set alu_status_register_write(H), alu_status_register_isel(const.0);
	set m2_multiplexer_isel(program_rom.out);
}

/*
 * pc = Rz, if Rx >= Ry (unsigned)
 */
function BGEQU(auto) {
	call load_operands();
	fix math_alu_csel(GEQ_U); //, math_alu_iselB(operand2_register.out);
	set pc_register_write(H);
	set alu_status_register_isel(math_alu.status);
	set alu_status_register_write(H), alu_status_register_isel(math_alu.status);
	set pc_register_write(H);
	set alu_status_register_isel(const.0);
	set alu_status_register_write(H), alu_status_register_isel(const.0);
	set m2_multiplexer_isel(program_rom.out);
}

/*
 * pc = Rz, if Rx <= Ry (unsigned)
 */
function BLEQU(auto) {
	call load_operands();
	fix math_alu_csel(LEQ_U); //, math_alu_iselB(operand2_register.out);
	set pc_register_write(H);
	set alu_status_register_isel(math_alu.status);
	set alu_status_register_write(H), alu_status_register_isel(math_alu.status);
	set pc_register_write(H);
	set alu_status_register_isel(const.0);
	set alu_status_register_write(H), alu_status_register_isel(const.0);
	set m2_multiplexer_isel(program_rom.out);
}

/*
 * pc = Rz, if Rx >= Ry (signed)
 */
function BGEQ(auto) {
	call load_operands();
	fix math_alu_csel(GEQ); //, math_alu_iselB(operand2_register.out);
	set pc_register_write(H);
	set alu_status_register_isel(math_alu.status);
	set alu_status_register_write(H), alu_status_register_isel(math_alu.status);
	set pc_register_write(H);
	set alu_status_register_isel(const.0);
	set alu_status_register_write(H), alu_status_register_isel(const.0);
	set m2_multiplexer_isel(program_rom.out);
}

/*
 * pc = Rz, if Rx > Ry (signed)
 */
function BGT(auto) {
	call load_operands();
	fix math_alu_csel(GT); //, math_alu_iselB(operand2_register.out);
	set pc_register_write(H);
	set alu_status_register_isel(math_alu.status);
	set alu_status_register_write(H), alu_status_register_isel(math_alu.status);
	set pc_register_write(H);
	set alu_status_register_isel(const.0);
	set alu_status_register_write(H), alu_status_register_isel(const.0);
	set m2_multiplexer_isel(program_rom.out);
}

/*
 * pc = Rz, if Rx < Ry (signed)
 */
function BLT(auto) {
	call load_operands();
	fix math_alu_csel(LT); //, math_alu_iselB(operand2_register.out);
	set pc_register_write(H);
	set alu_status_register_isel(math_alu.status);
	set alu_status_register_write(H), alu_status_register_isel(math_alu.status);
	set pc_register_write(H);
	set alu_status_register_isel(const.0);
	set alu_status_register_write(H), alu_status_register_isel(const.0);
	set m2_multiplexer_isel(program_rom.out);
}

/*
 * pc = Rz, if Rx <= Ry (signed)
 */
function BLEQ(auto) {
	call load_operands();
	fix math_alu_csel(LEQ); //, math_alu_iselB(operand2_register.out);
	set pc_register_write(H);
	set alu_status_register_isel(math_alu.status);
	set alu_status_register_write(H), alu_status_register_isel(math_alu.status);
	set pc_register_write(H);
	set alu_status_register_isel(const.0);
	set alu_status_register_write(H), alu_status_register_isel(const.0);
	set m2_multiplexer_isel(program_rom.out);
}

/*
 *
 */
 function LC(auto) {
 	fix cache_register_file_port0_isel(program_rom.out);
 	set pc_register_write(H);
 	set noop(0);
 	set address_register_write(H);
 	set noop(0);
 	set pc_register_write(H);
 	set noop(0);
 	set cache_register_file_port0_write(H);
 	call fetch();
 }

/*
 * 1+3 Cycle No Operation
 */
function NOP(auto) {
	set noop(0);
	call fetch();
}

virtual fetch() {
	set pc_register_write(H);
	set noop(0);
	set m2_multiplexer_isel(program_rom.out);
}

virtual load_operands() {
	fix operand2_register_isel(cache_register_file.out);
	set pc_register_write(H);
	set address_register_write(H);
	set noop(0);
	set operand1_register_write(H);
	set pc_register_write(H);
	set address_register_write(H);
	set noop(0);
	set operand2_register_write(H);
}