<?xml version="1.0" encoding="UTF-8" ?>
<architecture wordSize="32">
	<!--
		Components:
		stack
		register	
		registerFile
		alu
		memory
		rom
		jumpLogic
	-->
	<!--
		=> Each input has to be an output somewhere else
		=> Except constants starting with :const. (e.g.: :const.0, :const.1, :const.4, ...)
		=> Outputs within a component have to be unique
		=> Special output :cv can only be once used and refers to the control-vector used later
	-->
	<register>
		<id>PortA_Register</id>
		<size>32</size>
		<inputs>
			<input>Cache_RegisterFile.out1</input>
			<input>Cache_RegisterFile.out2</input>
		</inputs>
		<output>:out.PortA</output>
	</register>
	<register>
		<id>ProgramPointer_Register</id>
		<size>32</size>
		<inputs>
			<input>Calculator_Alu.out</input>
			<input>ProgrammCounter_Stack.out</input>
		</inputs>
		<output>pc</output>
	</register>
	<register>
		<id>InstructionWord_Register</id>
		<size>32</size>
		<inputs>
			<input>Ram_Memory.out</input>
		</inputs>
		<output>inst</output>
	</register>
	<register>
		<id>MicroProgrammPointer</id>
		<size>32</size>
		<inputs>
			<input>mpPointerIncrementer_Alu.out</input>
			<input>Calculator_Alu.out</input>
		</inputs>
		<output>out</output>
	</register>
	<register>
		<id>JumpBuffer_Register</id>
		<size>32</size>
		<inputs>
			<input>Calculator_Alu.out</input>
		</inputs>
		<output>out</output>
	</register>
	<stack>
		<id>ProgrammCounter_Stack</id>
		<size>32</size>
		<inputs>
			<input>ProgramPointer_Register.pc</input>
		</inputs>
		<output>out</output>
	</stack>
	<rom>
		<id>Microcode_Rom</id>
		<wordSize>31</wordSize>
		<addressSize>32</addressSize>
		<contentFile>processors/mips/program.hex</contentFile>
		<addresses>
			<address>MicroProgrammPointer.out</address>
		</addresses>
		<output>:cv</output>
	</rom>
	<registerFile>
		<id>Cache_RegisterFile</id>
		<addressSize>5</addressSize>
		<wordSize>32</wordSize>
		<ports>
			<port>
				<type>out</type>
				<addresses>
					<address>InstructionWord_Register.inst[0,5]</address>
					<address>Cache_RegisterFile.out1</address>
					<address>Cache_RegisterFile.out2</address>
				</addresses>
				<output>out1</output>
			</port>
			<port>
				<type>out</type>
				<addresses>
					<address>InstructionWord_Register.inst[6,10]</address>
					<address>Cache_RegisterFile.out1</address>
					<address>Cache_RegisterFile.out2</address>
				</addresses>
				<output>out2</output>
			</port>
			<port>
				<type>in</type>
				<addresses>
					<address>InstructionWord_Register.inst[11,15]</address>
				</addresses>
				<inputs>
					<input>Ram_Memory.out</input>
					<input>Calculator_Alu.out</input>
					<input>InstructionWord_Register.inst[16,31]</input>
					<input>Cache_RegisterFile.out1</input>
					<input>Cache_RegisterFile.out2</input>
				</inputs>
			</port>
		</ports>
	</registerFile>
	<alu>
		<id>mpPointerIncrementer_Alu</id>
		<wordSize>32</wordSize>
		<inputsOperandA>
			<input>MicroProgrammPointer.out</input>
		</inputsOperandA>
		<inputsOperandB>
			<input>:const.1</input>			
		</inputsOperandB>
		<output>out</output>
		<operations>
			<operation>add</operation>
		</operations>
	</alu>
	<alu>
		<id>Calculator_Alu</id>
		<wordSize>32</wordSize>
		<inputsOperandA>
			<input>Cache_RegisterFile.out1</input>
			<input>ProgrammCounter_Stack.out</input>
			<input>Calculator_Alu.out</input>
			<input>ProgramPointer_Register.pc</input>
		</inputsOperandA>
		<inputsOperandB>
			<input>Cache_RegisterFile.out2</input>
			<input>:const.0</input>
			<input>:const.1</input>			
		</inputsOperandB>
		<output>out</output>
		<operations>
			<operation>add</operation>
			<operation>sub</operation>
			<operation>srl</operation>
			<operation>sll</operation>
			<operation>and</operation>
			<operation>or</operation>
			<operation>not</operation>
		</operations>
		<conditions>
			<condition>zero</condition>
			<condition>eq</condition>
			<condition>lt</condition>
			<condition>gt</condition>
		</conditions>
		<statusFlags>flags</statusFlags>
	</alu>
	<memory>
		<id>Ram_Memory</id>
		<addressSize>32</addressSize>
		<wordSize>32</wordSize>
		<ports>
			<port>
				<type>in</type>
				<addresses>
					<address>Cache_RegisterFile.out1</address>
					<address>Cache_RegisterFile.out2</address>
				</addresses>
				<inputs>
					<input>Cache_RegisterFile.out1</input>
					<input>Cache_RegisterFile.out2</input>
					<input>Calculator_Alu.out</input>
					<input>ProgramPointer_Register.pc</input>
				</inputs>
			</port>		
			<port>
				<type>out</type>
				<addresses>
					<address>Cache_RegisterFile.out1</address>
					<address>Cache_RegisterFile.out2</address>
				</addresses>
				<inputs>
					<input>Cache_RegisterFile.out1</input>
					<input>Cache_RegisterFile.out2</input>
					<input>Calculator_Alu.out</input>
					<input>ProgramPointer_Register.pc</input>
				</inputs>
				<output>out</output>
			</port>			
		</ports>
	</memory>
	<jumpLogic>
		<id>ProgramPath_JumpLogic</id>
		<wordSize>32</wordSize>
		<programTargetA>
			<input>Calculator_Alu.out</input>
		</programTargetA>
		<programTargetB>
			<input>JumpBuffer_Register.out</input>
		</programTargetB>
		<output>out</output>
		<inputFlagsCnt>4</inputFlagsCnt>
		<inputFlags>Calculator_Alu.flags</inputFlags>
	</jumpLogic>
</architecture>