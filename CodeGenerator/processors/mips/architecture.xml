<?xml version="1.0" encoding="UTF-8" ?>
<architecture wordSize="32">
	<!--
		Components:
		stack
		register	
		registerFile
		alu
		memory
		rom
		jumpLogic
	-->
	<!--
		=> Each input has to be an output somewhere else
		=> Except constants starting with :const. (e.g.: :const.0, :const.1, :const.4, ...)
		=> Outputs within a component have to be unique
		=> Special output :cv can only be once used and refers to the control-vector used later
	-->
	<register>
		<id>portA</id>
		<size>32</size>
		<inputs>
			<input>reg.out1</input>
			<input>reg.out2</input>
		</inputs>
		<output>out</output>
		<gpio>true</gpio>
	</register>
	<register>
		<id>pp</id>
		<size>32</size>
		<inputs>
			<input>alu.out</input>
			<input>pcStack.out</input>
		</inputs>
		<output>pc</output>
		<gpio>false</gpio>
	</register>
	<register>
		<id>ir</id>
		<size>32</size>
		<inputs>
			<input>mainMem.out</input>
		</inputs>
		<output>inst</output>
		<gpio>false</gpio>
	</register>
	<register>
		<id>mcPc</id>
		<size>32</size>
		<inputs>
			<input>mcPcIncr.out</input>
			<input>alu.out</input>
		</inputs>
		<output>out</output>
		<gpio>false</gpio>
	</register>
	<register>
		<id>jmpBuffer</id>
		<size>32</size>
		<inputs>
			<input>alu.out</input>
		</inputs>
		<output>out</output>
		<gpio>false</gpio>
	</register>
	<stack>
		<id>pcStack</id>
		<size>32</size>
		<inputs>
			<input>pp.pc</input>
		</inputs>
		<output>out</output>
	</stack>
	<rom>
		<id>microcode</id>
		<wordSize>31</wordSize>
		<addressSize>32</addressSize>
		<contentFile>processors/mips/program.hex</contentFile>
		<addresses>
			<address>mcPc.out</address>
		</addresses>
		<output>:cv</output>
	</rom>
	<registerFile>
		<id>reg</id>
		<addressSize>5</addressSize>
		<wordSize>32</wordSize>
		<ports>
			<port>
				<type>out</type>
				<addresses>
					<address>ir.inst[0,5]</address>
					<address>reg.out1</address>
					<address>reg.out2</address>
				</addresses>
				<output>out1</output>
			</port>
			<port>
				<type>out</type>
				<addresses>
					<address>ir.inst[6,10]</address>
					<address>reg.out1</address>
					<address>reg.out2</address>
				</addresses>
				<output>out2</output>
			</port>
			<port>
				<type>in</type>
				<addresses>
					<address>ir.inst[11,15]</address>
				</addresses>
				<inputs>
					<input>mainMem.out</input>
					<input>alu.out</input>
					<input>ir.inst[16,31]</input>
					<input>reg.out1</input>
					<input>reg.out2</input>
					<input>portA.out</input>
				</inputs>
			</port>
		</ports>
	</registerFile>
	<alu>
		<id>mcPcIncr</id>
		<wordSize>32</wordSize>
		<inputsOperandA>
			<input>mcPc.out</input>
		</inputsOperandA>
		<inputsOperandB>
			<input>:const.1</input>			
		</inputsOperandB>
		<output>out</output>
		<operations>
			<operation>add</operation>
		</operations>
	</alu>
	<alu>
		<id>alu</id>
		<wordSize>32</wordSize>
		<inputsOperandA>
			<input>reg.out1</input>
			<input>pcStack.out</input>
			<input>alu.out</input>
			<input>pp.pc</input>
		</inputsOperandA>
		<inputsOperandB>
			<input>reg.out2</input>
			<input>:const.0</input>
			<input>:const.1</input>			
		</inputsOperandB>
		<output>out</output>
		<operations>
			<operation>add</operation>
			<operation>sub</operation>
			<operation>srl</operation>
			<operation>sll</operation>
			<operation>and</operation>
			<operation>or</operation>
			<operation>not</operation>
		</operations>
		<conditions>
			<condition>zero</condition>
			<condition>eq</condition>
			<condition>lt</condition>
			<condition>gt</condition>
		</conditions>
		<statusFlags>flags</statusFlags>
	</alu>
	<memory>
		<id>mainMem</id>
		<addressSize>32</addressSize>
		<wordSize>32</wordSize>
		<!--
			types:
			intern, extern
		-->
		<type>intern</type>
		<ports>
			<port>
				<type>in</type>
				<addresses>
					<address>reg.out1</address>
					<address>reg.out2</address>
				</addresses>
				<inputs>
					<input>reg.out1</input>
					<input>reg.out2</input>
					<input>alu.out</input>
					<input>pp.pc</input>
				</inputs>
			</port>		
			<port>
				<type>out</type>
				<addresses>
					<address>reg.out1</address>
					<address>reg.out2</address>
				</addresses>
				<inputs>
					<input>reg.out1</input>
					<input>reg.out2</input>
					<input>alu.out</input>
					<input>pp.pc</input>
				</inputs>
				<output>out</output>
			</port>			
		</ports>
	</memory>
	<jumpLogic>
		<id>jmpLgc</id>
		<wordSize>32</wordSize>
		<programTargetA>
			<input>alu.out</input>
		</programTargetA>
		<programTargetB>
			<input>jmpBuffer.out</input>
		</programTargetB>
		<output>out</output>
		<inputFlagsCnt>4</inputFlagsCnt>
		<inputFlags>alu.flags</inputFlags>
	</jumpLogic>
</architecture>