<?xml version="1.0" encoding="UTF-8" ?>
<architecture wordSize="32">
	<!--
		Components:
		register	
		registerFile
		alu
		memory
		rom
		jumpLogic
	-->
	<!--
		=> Each input has to be an output somewhere else
		=> Otputs within a component have to be unique
		=> IDs have to be unique
		=> Except identifiers starting with "system"
		=> system identifiers are used for uncommon options and connections
			=> system.const.n refers to the constant'n' input
			=> system.cv can only used once and refers to the control-vector used for components with <control>system.auto</control>
			=> system.auto is used for auto-connecting control-vectors of components
			=> system.out.name defines an architecture-output named 'name'
			=> system.in.name defines an architecture-input named 'name'
	-->
	<register x="0" y="0">
		<id>PortA_Register</id>
		<size>32</size>
		<inputs>
			<input>Cache_RegisterFile.out1</input>
			<input>Cache_RegisterFile.out2</input>
		</inputs>
		<output>system.out.PortA</output>
		<control>system.auto</control>
	</register>
	<register x="0" y="0">
		<id>ProgramPointer_Register</id>
		<size>32</size>
		<inputs>
			<input>Calculator_Alu.out</input>
		</inputs>
		<output>ProgramPointer_Register.pc</output>
		<control>system.auto</control>
	</register>
	<register x="0" y="0">
		<id>InstructionWord_Register</id>
		<size>32</size>
		<inputs>
			<input>ProgramRom.out</input>
		</inputs>
		<output>InstructionWord_Register.inst</output>
		<control>system.auto</control>
	</register>
	<register x="0" y="0">
		<id>MicroProgrammPointer</id>
		<size>32</size>
		<inputs>
			<input>mpPointerIncrementer_Alu.out</input>
			<input>Calculator_Alu.out</input>
		</inputs>
		<output>MicroProgrammPointer.out</output>
		<control>system.auto</control>
	</register>
	<register x="0" y="0">
		<id>JumpBuffer_Register</id>
		<size>32</size>
		<inputs>
			<input>Calculator_Alu.out</input>
		</inputs>
		<output>JumpBuffer_Register.out</output>
		<control>system.auto</control>
	</register>
	<rom x="0" y="0">
		<id>Microcode_Rom</id>
		<wordSize>31</wordSize>
		<addressSize>32</addressSize>
		<contentFile>processors/mips/program.hex</contentFile>
		<addresses>
			<address>MicroProgrammPointer.out</address>
		</addresses>
		<output>system.control</output>
		<control>system.auto</control>
	</rom>
	<rom x="0" y="0">
		<id>ProgramRom</id>
		<wordSize>32</wordSize>
		<addressSize>32</addressSize>
		<contentFile>processors/mips/program.hex</contentFile>
		<addresses>
			<address>ProgramPointer_Register.pc</address>
		</addresses>
		<output>ProgramRom.out</output>
		<control>system.auto</control>
	</rom>
	<registerFile x="0" y="0">
		<id>Cache_RegisterFile</id>
		<addressSize>5</addressSize>
		<wordSize>32</wordSize>
		<ports>
			<port>
				<type>out</type>
				<addresses>
					<address>InstructionWord_Register.inst[21,25]</address>
				</addresses>
				<output>Cache_RegisterFile.out1</output>
			</port>
			<port>
				<type>out</type>
				<addresses>
					<address>InstructionWord_Register.inst[16,20]</address>
				</addresses>
				<output>Cache_RegisterFile.out2</output>
			</port>
			<port>
				<type>in</type>
				<addresses>
					<address>InstructionWord_Register.inst[11,15]</address>
				</addresses>
				<inputs>
					<input>ProgramRom.out</input>
					<input>Calculator_Alu.out</input>
					<input>InstructionWord_Register.inst[0,15]</input>
					<input>Cache_RegisterFile.out1</input>
					<input>Cache_RegisterFile.out2</input>
				</inputs>
			</port>
		</ports>
		<control>system.auto</control>
	</registerFile>
	<alu x="0" y="0">
		<id>mpPointerIncrementer_Alu</id>
		<wordSize>32</wordSize>
		<inputsOperandA>
			<input>MicroProgrammPointer.out</input>
		</inputsOperandA>
		<inputsOperandB>
			<input>system.const.1</input>			
		</inputsOperandB>
		<output1>mpPointerIncrementer_Alu.out</output1>
		<output2>system.open</output2>
		<operations>
			<operation>add</operation>
		</operations>
		<control>system.auto</control>
	</alu>
	<alu x="0" y="0">
		<id>Calculator_Alu</id>
		<wordSize>32</wordSize>
		<inputsOperandA>
			<input>Cache_RegisterFile.out1</input>
			<input>Calculator_Alu.out</input>
			<input>ProgramPointer_Register.pc</input>
		</inputsOperandA>
		<inputsOperandB>
			<input>Cache_RegisterFile.out2</input>
			<input>system.const.0</input>
			<input>system.const.1</input>			
		</inputsOperandB>
		<output1>Calculator_Alu.out</output1>
		<output2>system.open</output2>
		<operations>
			<operation>add</operation>
			<operation>sub</operation>
			<operation>srl</operation>
			<operation>sll</operation>
			<operation>and</operation>
			<operation>or</operation>
			<operation>not</operation>
			<operation>div</operation>
			<operation>mul</operation>
		</operations>
		<conditions>
			<condition>eq</condition>
			<condition>lt</condition>
			<condition>gt</condition>
		</conditions>
		<status>Calculator_Alu.flag</status>
		<control>system.auto</control>
	</alu>
	<jumpLogic x="0" y="0">
		<id>ProgramPath_JumpLogic</id>
		<wordSize>32</wordSize>
		<programTargetA>
			<input>Calculator_Alu.out</input>
		</programTargetA>
		<programTargetB>
			<input>JumpBuffer_Register.out</input>
		</programTargetB>
		<output>ProgramPath_JumpLogic.out</output>
		<inputFlagsCnt>4</inputFlagsCnt>
		<inputFlags>Calculator_Alu.flag</inputFlags>
		<control>system.auto</control>
	</jumpLogic>
</architecture>