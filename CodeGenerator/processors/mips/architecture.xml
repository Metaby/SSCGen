<?xml version="1.0" encoding="UTF-8" ?>
<architecture wordSize="32">
	<!--
		Components:
		Interrupt
		Timer
		Stack
		register	
		registerFile
		ALU
		memory
	-->
	<register>
		<id>portA</id>
		<size>32</size>
		<inputs>
			<input>reg.out1</input>
			<input>reg.out2</input>
		</inputs>
		<output>out</output>
		<gpio>true</gpio>
	</register>
	<register>
		<id>pp</id>
		<size>32</size>
		<inputs>
			<input>alu.out</input>
			<input>pcStack.out</input>
		</inputs>
		<output>pc</output>
		<gpio>false</gpio>
	</register>
	<register>
		<id>ir</id>
		<size>32</size>
		<inputs>
			<input>mainMem.out</input>
		</inputs>
		<output>inst</output>
		<gpio>false</gpio>
	</register>
	<register>
		<id>mcPc</id>
		<size>32</size>
		<inputs>
			<input>alu.out</input>
		</inputs>
		<output>out</output>
		<gpio>false</gpio>
	</register>
	<register>
		<id>jmpBuffer</id>
		<size>32</size>
		<inputs>
			<input>alu.out</input>
		</inputs>
		<output>out</output>
		<gpio>false</gpio>
	</register>
	<stack>
		<id>pcStack</id>
		<size>32</size>
		<inputs>
			<input>pp.pc</input>
		</inputs>
		<output>out</output>
	</stack>
	<rom>
		<id>microcode</id>
		<wordSize>28</wordSize>
		<addressSize>32</addressSize>
		<contentFile>microcode.xml</contentFile>
		<addresses>
			<address>mcPc.out</address>
		</addresses>
		<output>out</output>
	</rom>
	<registerFile>
		<id>reg</id>
		<addressSize>5</addressSize>
		<ports>
			<port>
				<type>out</type>
				<addresses>
					<address>ir.inst[0,5]</address>
					<address>reg.out1</address>
					<address>reg.out2</address>
				</addresses>
				<output>out1</output>
			</port>
			<port>
				<type>out</type>
				<addresses>
					<address>ir.inst[6,10]</address>
					<address>reg.out1</address>
					<address>reg.out2</address>
				</addresses>
				<output>out2</output>
			</port>
			<port>
				<type>in</type>
				<addresses>
					<address>ir.inst[11,15]</address>
				</addresses>
				<inputs>
					<input>mainMem.out</input>
					<input>alu.out</input>
					<input>ir.inst[16,31]</input>
					<input>reg.out1</input>
					<input>reg.out2</input>
					<input>portA.out</input>
				</inputs>
			</port>
		</ports>
	</registerFile>
	<alu>
		<id>alu</id>
		<inputsOperandA>
			<input>reg.out1</input>
			<input>pcStack.out</input>
			<input>alu.out</input>
			<input>pp.pc</input>
		</inputsOperandA>
		<inputsOperandB>
			<input>reg.out2</input>
			<input>const.0</input>
			<input>const.1</input>			
		</inputsOperandB>
		<output>out</output>
		<!--
			operations:
			add, subtract, lShiftLeft, lShiftRight, aShiftRight, divide, multiply, rotateL, rotateR, bitAnd, bitOr, bitXor, bitNot
		-->
		<operations>
			<operation>add</operation>
			<operation>subtract</operation>
			<operation>lShiftLeft</operation>
			<operation>lShiftRight</operation>
			<operation>bitAnd</operation>
			<operation>bitOr</operation>
			<operation>bitNot</operation>
		</operations>
		<!--
			conditions:
			zero, notZero, equal, notEqual, lower, higher
		-->
		<conditions>
			<condition>zero</condition>
			<condition>equal</condition>
			<condition>lower</condition>
			<condition>higher</condition>
		</conditions>
		<statusFlags>flags</statusFlags>
	</alu>
	<memory>
		<id>mainMem</id>
		<addressSize>32</addressSize>
		<!--
			types:
			OnChip, Extern
		-->
		<type>intern</type>
		<ports>
			<port>
				<type>inOut</type>
				<addresses>
					<address>reg.out1</address>
					<address>reg.out2</address>
				</addresses>
				<inputs>
					<input>reg.out1</input>
					<input>reg.out2</input>
					<input>alu.out</input>
					<input>pp.pc</input>
				</inputs>
				<output>out</output>
			</port>			
		</ports>
	</memory>
	<jumpLogic>
		<id>jmpLgc</id>
		<wordSize>32</wordSize>
		<programTargetA>
			<input>alu.out</input>
		</programTargetA>
		<programTargetB>
			<input>jmpBuffer.out</input>
		</programTargetB>
		<output>out</output>
		<inputFlagsCnt>4</inputFlagsCnt>
		<inputFlags>alu.flags</inputFlags>
	</jumpLogic>
</architecture>
<!--
	Falls noch Zeit ist
	<Interrupt></Interrupt>
	<Timer></Timer>
-->
<!-- D:\Programme\Java\jdk1.8.0_121\bin xjc D:\OneDrive\Projekte\git\CodeGenerator\Templates\specification.xsd -d D:\OneDrive\Projekte\git\CodeGenerator\src\jaxbClasses -->