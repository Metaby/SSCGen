LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY divider IS
	GENERIC (
		size : integer := 7
	);
	PORT (
		sgnd		:	in	std_logic;
		dividend	:	in std_logic_vector(size DOWNTO 0);
		divisor	:	in std_logic_vector(size DOWNTO 0);
		remain	:	out std_logic_vector(size DOWNTO 0);
		res		:	out std_logic_vector(size DOWNTO 0)
	);
  constant half_size : integer := ((size + 1) / 2) - 1;
END divider;

ARCHITECTURE arch OF divider IS
	COMPONENT restoring_divider
		GENERIC (
			size : integer := 7
		);
		PORT (
			dividend	:	in std_logic_vector(size DOWNTO 0);
			divisor	:	in std_logic_vector(size DOWNTO 0);
			remain	:	out std_logic_vector(size DOWNTO 0);
			res		:	out std_logic_vector(size DOWNTO 0)
		);
	END COMPONENT;
	COMPONENT absolute
		GENERIC (
			size 		: 	integer := 7
		);
		PORT (
			input		:	in std_logic_vector(size DOWNTO 0);
			output	:	out std_logic_vector(size DOWNTO 0)
		);
	END COMPONENT;
	COMPONENT tc_converter
		GENERIC (
			size		:	integer := 7
		);
		PORT (
			input		:	in std_logic_vector(size DOWNTO 0);
			output	:	out std_logic_vector(size DOWNTO 0)
		);
	END COMPONENT;
SIGNAL dividend_expand	:	std_logic_vector(size + 1 DOWNTO 0);
SIGNAL divisor_expand	:	std_logic_vector(size + 1 DOWNTO 0);
SIGNAL dividend_abs		:	std_logic_vector(size + 1 DOWNTO 0);
SIGNAL divisor_abs		:	std_logic_vector(size + 1 DOWNTO 0);
SIGNAL u_res				:	std_logic_vector(size + 1 DOWNTO 0);
SIGNAL u_rem				:	std_logic_vector(size + 1 DOWNTO 0);
SIGNAL s_res				:	std_logic_vector(size + 1 DOWNTO 0);
SIGNAL s_rem				:	std_logic_vector(size + 1 DOWNTO 0);
BEGIN
dividend_expand <= (sgnd and dividend(size)) & dividend;
divisor_expand <= (sgnd and divisor(size)) & divisor;
abs_dividend	:	absolute GENERIC MAP (size => size + 1) PORT MAP (dividend_expand, dividend_abs);
abs_divisor		:	absolute GENERIC MAP (size => size + 1) PORT MAP (divisor_expand, divisor_abs);
div				:	restoring_divider GENERIC MAP (size => size + 1) PORT MAP (dividend_abs, divisor_abs, u_res, u_rem);
conv_res			:	tc_converter GENERIC MAP (size => size + 1) PORT MAP (u_res, s_res);
conv_rem			:	tc_converter GENERIC MAP (size => size + 1) PORT MAP (u_rem, s_rem);
res <= dividend_expand(size DOWNTO 0); --u_res(size DOWNTO 0) when (sgnd = '0' or (sgnd = '1' and ((dividend(size) and sgnd) xor (divisor(size) and sgnd)) = '1')) else s_res(size DOWNTO 0);
remain <= u_rem(size DOWNTO 0);
END arch;